{
	"info": {
		"_postman_id": "d1ac9c05-a692-4035-8866-925e35ea2117",
		"name": "API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40252150"
	},
	"item": [
		{
			"name": "Login to account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accountType = pm.iterationData.get(\"type\"); // \"valid\" or \"invalid\"\r",
							"const description = pm.iterationData.get(\"description\") || \"No description\";\r",
							"\r",
							"// Log current test case\r",
							"console.log(`Running test: ${description}`);\r",
							"\r",
							"// ----- VALID ACCOUNT TESTS -----\r",
							"if (accountType === \"valid\" && pm.response.code === 200 && response.access_token) {\r",
							"    pm.test(`[VALID] Status code is 200 - ${description}`, function () {\r",
							"        pm.expect(pm.response.code, `Expected 200 for: ${description}`).to.equal(200);\r",
							"    });\r",
							"\r",
							"    pm.test(`[VALID] Response has required token fields - ${description}`, function () {\r",
							"        pm.expect(response, `Missing token fields for: ${description}`).to.have.property('access_token');\r",
							"        pm.expect(response).to.have.property('token_type');\r",
							"        pm.expect(response).to.have.property('expires_in');\r",
							"    });\r",
							"\r",
							"    pm.test(`[VALID] Validate types of properties - ${description}`, function () {\r",
							"        pm.expect(response.access_token).to.be.a('string');\r",
							"        pm.expect(response.token_type).to.be.a('string');\r",
							"        pm.expect(response.expires_in).to.be.a('number');\r",
							"    });\r",
							"\r",
							"    // Save token for reuse\r",
							"    pm.collectionVariables.set(\"token\", response.access_token);\r",
							"\r",
							"    // const response = pm.response.json();\r",
							"\r",
							"    // if (pm.response.code === 200 && response.access_token) {\r",
							"    //     pm.collectionVariables.set(\"token\", response.access_token);\r",
							"    //     console.log(\"Token saved:\", response.access_token);\r",
							"    // } else {\r",
							"    //     pm.collectionVariables.unset(\"token\");\r",
							"    //     console.warn(\"Login failed, token not set\");\r",
							"    // }\r",
							"}\r",
							"\r",
							"// ----- INVALID ACCOUNT TESTS -----\r",
							"else if (accountType === \"invalid\") {\r",
							"    pm.test(`[INVALID] Status code is 401 - ${description}`, function () {\r",
							"        pm.expect(pm.response.code, `Expected 401 for: ${description}`).to.equal(401);\r",
							"    });\r",
							"\r",
							"    pm.test(`[INVALID] Response has error property - ${description}`, function () {\r",
							"        pm.expect(response, `Missing error field for: ${description}`).to.have.property('error');\r",
							"    });\r",
							"\r",
							"    pm.test(`[INVALID] Error message is 'Unauthorized' - ${description}`, function () {\r",
							"        pm.expect(response.error, `Wrong error message for: ${description}`).to.equal('Unauthorized');\r",
							"    });\r",
							"    //stop next request if invalid account type\r",
							"    postman.setNextRequest(null)\r",
							"}\r",
							"\r",
							"// ----- SAFETY CHECK -----\r",
							"else {\r",
							"    pm.test(`[ERROR] Unknown account type - ${description}`, function () {\r",
							"        pm.expect.fail(`Unknown account type: ${accountType}`);\r",
							"    });\r",
							"\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Basic checks\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"  // Exact keys (no missing and no extra)\r",
							"  pm.test(\"Response has exact required keys\", function () {\r",
							"    const expectedKeys = [\r",
							"      \"id\", \"first_name\", \"last_name\", \"address\", \"city\", \"state\",\r",
							"      \"country\", \"postcode\", \"phone\", \"dob\", \"email\", \"password\",\r",
							"      \"role\", \"enabled\", \"failed_login_attempts\"\r",
							"    ];\r",
							"    const keys = Object.keys(response).sort();\r",
							"    pm.expect(keys).to.eql(expectedKeys.sort());\r",
							"  });\r",
							"\r",
							"  // Types + specific validations\r",
							"  pm.test(\"Response data types and formats are correct\", function () {\r",
							"    pm.expect(response.id).to.be.a(\"number\");\r",
							"    pm.expect(response.first_name).to.be.a(\"string\");\r",
							"    pm.expect(response.last_name).to.be.a(\"string\");\r",
							"    pm.expect(response.address).to.be.a(\"string\");\r",
							"    pm.expect(response.city).to.be.a(\"string\");\r",
							"\r",
							"    // Nulls (use .to.be.null, not .to.be.a('null'))\r",
							"    pm.expect(response.state).to.be.null;\r",
							"    pm.expect(response.postcode).to.be.null;\r",
							"    pm.expect(response.phone).to.be.null;\r",
							"\r",
							"    pm.expect(response.country).to.be.a(\"string\");\r",
							"    pm.expect(response.dob).to.be.a(\"string\");\r",
							"    pm.expect(response.email).to.be.a(\"string\");\r",
							"    pm.expect(response.password).to.be.a(\"string\");\r",
							"    pm.expect(response.role).to.be.a(\"string\");\r",
							"    pm.expect(response.enabled).to.be.a(\"number\");\r",
							"    pm.expect(response.failed_login_attempts).to.be.a(\"number\");\r",
							"  });\r",
							"\r",
							"  // Value constraints\r",
							"  pm.test(\"Field value constraints are valid\", function () {\r",
							"    // id positive\r",
							"    pm.expect(response.id).to.be.above(0);\r",
							"\r",
							"    // dob simple YYYY-MM-DD format\r",
							"    pm.expect(response.dob).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"\r",
							"    // email format\r",
							"    pm.expect(response.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"\r",
							"    // password looks like SHA-256 hex\r",
							"    pm.expect(response.password).to.match(/^[a-f0-9]{64}$/i);\r",
							"\r",
							"    // role expected values\r",
							"    pm.expect([\"user\", \"admin\"]).to.include(response.role);\r",
							"\r",
							"    // enabled is 0/1\r",
							"    pm.expect([0, 1]).to.include(response.enabled);\r",
							"\r",
							"    // failed_login_attempts non-negative\r",
							"    pm.expect(response.failed_login_attempts).to.be.at.least(0);\r",
							"  });\r",
							"\r",
							"  // Optional: if you saved the login email, assert it matches\r",
							"  const loginEmail = pm.collectionVariables.get(\"login_email\");\r",
							"  if (loginEmail) {\r",
							"    pm.test(\"Email matches the logged-in user\", function () {\r",
							"      pm.expect(response.email).to.equal(loginEmail.trim());\r",
							"    });\r",
							"  }\r",
							"\r",
							"} else if (pm.response.code === 401) {\r",
							"  // Unauthorized contract\r",
							"  pm.test(\"Status code is 401 - Unauthorized\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(401);\r",
							"  });\r",
							"\r",
							"  pm.test(\"Response has only 'message' with 'Unauthorized'\", function () {\r",
							"    pm.expect(response).to.have.property(\"message\", \"Unauthorized\");\r",
							"    pm.expect(Object.keys(response)).to.eql([\"message\"]);\r",
							"  });\r",
							"\r",
							"} else {\r",
							"  // Anything else is unexpected\r",
							"  pm.test(\"Unexpected status code\", function () {\r",
							"    pm.expect.fail(`Unexpected status: ${pm.response.code}`);\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/me",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const description = pm.iterationData.get(\"description\") || \"No description\";\r",
							"\r",
							"// Log the current test case\r",
							"console.log(`Running change-password test: ${description}`);\r",
							"\r",
							"// Check HTTP status\r",
							"pm.test(`[CHANGE PASSWORD] Status code is correct - ${description}`, function () {\r",
							"    pm.expect(pm.response.code, `Unexpected status for: ${description}`).to.be.oneOf([200, 400, 404]);\r",
							"});\r",
							"\r",
							"// ----- SUCCESS CASE -----\r",
							"if (response.success === true) {\r",
							"    pm.test(`[CHANGE PASSWORD] Successful password change - ${description}`, function () {\r",
							"        pm.expect(response.success).to.be.true;\r",
							"        // Optionally check no error message is present\r",
							"        pm.expect(response).to.not.have.property('message');\r",
							"    });\r",
							"}\r",
							"\r",
							"// ----- WRONG CURRENT PASSWORD CASE -----\r",
							"else if (response.success === false && response.message && response.message.includes(\"does not match\")) {\r",
							"    pm.test(`[CHANGE PASSWORD] Wrong current password handled - ${description}`, function () {\r",
							"        pm.expect(response.success).to.be.false;\r",
							"        pm.expect(response.message).to.include(\"does not match\");\r",
							"    });\r",
							"}\r",
							"\r",
							"// ----- PASSWORD CONFIRMATION MISMATCH CASE -----\r",
							"else if (response.message && (\r",
							"    response.message.toLowerCase().includes(\"confirmation\") || \r",
							"    response.message.toLowerCase().includes(\"not match\")\r",
							")) {\r",
							"    pm.test(`[CHANGE PASSWORD] Password confirmation mismatch handled - ${description}`, function () {\r",
							"        // Your backend returns only message here — not great, but we test what's available\r",
							"        pm.expect(response.message.toLowerCase()).to.include(\"not match\");\r",
							"    });\r",
							"}\r",
							"\r",
							"// ----- RESOURCE NOT FOUND CASE -----\r",
							"else if (response.message && response.message.toLowerCase().includes(\"resource not found\")) {\r",
							"    pm.test(`[CHANGE PASSWORD] Resource not found handled - ${description}`, function () {\r",
							"        pm.expect(response.message).to.equal(\"Resource not found\");\r",
							"    });\r",
							"}\r",
							"\r",
							"// ----- UNKNOWN CASE -----\r",
							"else {\r",
							"    pm.test(`[CHANGE PASSWORD] Unexpected response format - ${description}`, function () {\r",
							"        pm.expect.fail(`Unexpected change-password response: ${JSON.stringify(response)}`);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"current_password\": \"{{password}}\",\r\n  \"new_password\": \"{{newPassword}}\",\r\n  \"new_password_confirmation\": \"{{newPasswordConfirmation}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/change-password",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"change-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const description = pm.iterationData.get(\"description\") || \"No description\";\r",
							"\r",
							"// Log current test case\r",
							"console.log(`Running test: ${description}`);\r",
							"\r",
							"// ----- INVALID ACCOUNT TESTS -----\r",
							"\r",
							"pm.test(`[INVALID] Status code is 401 - ${description}`, function () {\r",
							"  pm.expect(pm.response.code, `Expected 401 for: ${description}`).to.equal(401);\r",
							"});\r",
							"\r",
							"pm.test(`[INVALID] Response has error property - ${description}`, function () {\r",
							"  pm.expect(\r",
							"    response,\r",
							"    `Missing error field for: ${description}`\r",
							"  ).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\r",
							"  `[INVALID] Error message is 'Unauthorized' - ${description}`,\r",
							"  function () {\r",
							"    pm.expect(\r",
							"      response.error,\r",
							"      `Wrong error message for: ${description}`\r",
							"    ).to.equal(\"Unauthorized\");\r",
							"  }\r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with new password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accountType = pm.iterationData.get(\"type\"); // \"valid\" or \"invalid\"\r",
							"const description = pm.iterationData.get(\"description\") || \"No description\";\r",
							"\r",
							"// Log current test case\r",
							"console.log(`Running test: ${description}`);\r",
							"\r",
							"pm.test(`[VALID] Status code is 200 - ${description}`, function () {\r",
							"  pm.expect(pm.response.code, `Expected 200 for: ${description}`).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\r",
							"  `[VALID] Response has required token fields - ${description}`,\r",
							"  function () {\r",
							"    pm.expect(\r",
							"      response,\r",
							"      `Missing token fields for: ${description}`\r",
							"    ).to.have.property(\"access_token\");\r",
							"    pm.expect(response).to.have.property(\"token_type\");\r",
							"    pm.expect(response).to.have.property(\"expires_in\");\r",
							"  }\r",
							");\r",
							"\r",
							"pm.test(`[VALID] Validate types of properties - ${description}`, function () {\r",
							"  pm.expect(response.access_token).to.be.a(\"string\");\r",
							"  pm.expect(response.token_type).to.be.a(\"string\");\r",
							"  pm.expect(response.expires_in).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"// Save token for reuse\r",
							"pm.collectionVariables.set(\"token\", response.access_token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{newPassword}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8091",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "old_password",
			"value": ""
		}
	]
}